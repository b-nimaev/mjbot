import { ExtraEditMessageText } from "telegraf/typings/telegram-types"
import rlhubContext from "../../models/rlhubContext"
import { IUser, User } from "../../../models/IUser"
import greeting from "./home.greeting"
import { exists_generations } from "./home.generateHandler"

export default async function main_handler(ctx: rlhubContext) {

    if (ctx.updateType === "callback_query") {


        let data: 'generate' | 'tarifs' | 'back' = ctx.update.callback_query.data

        if (data === 'generate') {
            
            await generate_starting_section(ctx)
 
        } else if (data === 'tarifs') {

            ctx.wizard.selectStep(3)

        } else if (data === 'back') {
            ctx.wizard.selectStep(1)
            await greeting(ctx)
        }

        ctx.answerCbQuery()

    }

}

export async function generate_starting_section(ctx: rlhubContext) {
            
    let document: IUser | null = await User.findOne({
        id: ctx.from?.id
    })
    
    if (document) {
        
        let message: string = `‚õµÔ∏è–û—Å—Ç–∞–ª–æ—Å—å `
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
                ]
            }
        }

        console.log(document)

        if (document.free_generations) {

            if (document.free_generations > 0) {
                
                message += `${document.free_generations}/3 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è \n\n`
                message += `–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ü™Ñ\n\n`
                message += `–í—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.`
    
                await ctx.editMessageText(message, extra)
    
                ctx.wizard.selectStep(2)
            
            }
            
        } else {
            
            await exists_generations(ctx)
        
        }

    } else {

        ctx.wizard.selectStep(0)
        return await greeting(ctx)
    
    }

} 